/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface LSP9VaultInterface extends utils.Interface {
  functions: {
    "RENOUNCE_OWNERSHIP_CONFIRMATION_DELAY()": FunctionFragment;
    "RENOUNCE_OWNERSHIP_CONFIRMATION_PERIOD()": FunctionFragment;
    "VERSION()": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "batchCalls(bytes[])": FunctionFragment;
    "execute(uint256,address,uint256,bytes)": FunctionFragment;
    "executeBatch(uint256[],address[],uint256[],bytes[])": FunctionFragment;
    "getData(bytes32)": FunctionFragment;
    "getDataBatch(bytes32[])": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setData(bytes32,bytes)": FunctionFragment;
    "setDataBatch(bytes32[],bytes[])": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "universalReceiver(bytes32,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "RENOUNCE_OWNERSHIP_CONFIRMATION_DELAY"
      | "RENOUNCE_OWNERSHIP_CONFIRMATION_PERIOD"
      | "VERSION"
      | "acceptOwnership"
      | "batchCalls"
      | "execute"
      | "executeBatch"
      | "getData"
      | "getDataBatch"
      | "owner"
      | "pendingOwner"
      | "renounceOwnership"
      | "setData"
      | "setDataBatch"
      | "supportsInterface"
      | "transferOwnership"
      | "universalReceiver"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "RENOUNCE_OWNERSHIP_CONFIRMATION_DELAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RENOUNCE_OWNERSHIP_CONFIRMATION_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchCalls",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [BigNumberish, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeBatch",
    values: [BigNumberish[], string[], BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "getData", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getDataBatch",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setData",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDataBatch",
    values: [BytesLike[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "universalReceiver",
    values: [BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "RENOUNCE_OWNERSHIP_CONFIRMATION_DELAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RENOUNCE_OWNERSHIP_CONFIRMATION_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batchCalls", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDataBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDataBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "universalReceiver",
    data: BytesLike
  ): Result;

  events: {
    "ContractCreated(uint256,address,uint256,bytes32)": EventFragment;
    "DataChanged(bytes32,bytes)": EventFragment;
    "Executed(uint256,address,uint256,bytes4)": EventFragment;
    "OwnershipRenounced()": EventFragment;
    "OwnershipTransferStarted(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RenounceOwnershipStarted()": EventFragment;
    "UniversalReceiver(address,uint256,bytes32,bytes,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContractCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DataChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Executed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipRenounced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RenounceOwnershipStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UniversalReceiver"): EventFragment;
}

export interface ContractCreatedEventObject {
  operationType: BigNumber;
  contractAddress: string;
  value: BigNumber;
  salt: string;
}
export type ContractCreatedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string],
  ContractCreatedEventObject
>;

export type ContractCreatedEventFilter = TypedEventFilter<ContractCreatedEvent>;

export interface DataChangedEventObject {
  dataKey: string;
  dataValue: string;
}
export type DataChangedEvent = TypedEvent<
  [string, string],
  DataChangedEventObject
>;

export type DataChangedEventFilter = TypedEventFilter<DataChangedEvent>;

export interface ExecutedEventObject {
  operationType: BigNumber;
  target: string;
  value: BigNumber;
  selector: string;
}
export type ExecutedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string],
  ExecutedEventObject
>;

export type ExecutedEventFilter = TypedEventFilter<ExecutedEvent>;

export interface OwnershipRenouncedEventObject {}
export type OwnershipRenouncedEvent = TypedEvent<
  [],
  OwnershipRenouncedEventObject
>;

export type OwnershipRenouncedEventFilter =
  TypedEventFilter<OwnershipRenouncedEvent>;

export interface OwnershipTransferStartedEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferStartedEvent = TypedEvent<
  [string, string],
  OwnershipTransferStartedEventObject
>;

export type OwnershipTransferStartedEventFilter =
  TypedEventFilter<OwnershipTransferStartedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RenounceOwnershipStartedEventObject {}
export type RenounceOwnershipStartedEvent = TypedEvent<
  [],
  RenounceOwnershipStartedEventObject
>;

export type RenounceOwnershipStartedEventFilter =
  TypedEventFilter<RenounceOwnershipStartedEvent>;

export interface UniversalReceiverEventObject {
  from: string;
  value: BigNumber;
  typeId: string;
  receivedData: string;
  returnedValue: string;
}
export type UniversalReceiverEvent = TypedEvent<
  [string, BigNumber, string, string, string],
  UniversalReceiverEventObject
>;

export type UniversalReceiverEventFilter =
  TypedEventFilter<UniversalReceiverEvent>;

export interface LSP9Vault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LSP9VaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    RENOUNCE_OWNERSHIP_CONFIRMATION_DELAY(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    RENOUNCE_OWNERSHIP_CONFIRMATION_PERIOD(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    VERSION(overrides?: CallOverrides): Promise<[string]>;

    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    batchCalls(
      data: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    execute(
      operationType: BigNumberish,
      target: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    executeBatch(
      operationsType: BigNumberish[],
      targets: string[],
      values: BigNumberish[],
      datas: BytesLike[],
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    getData(
      dataKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { dataValue: string }>;

    getDataBatch(
      dataKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[string[]] & { dataValues: string[] }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setData(
      dataKey: BytesLike,
      dataValue: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    setDataBatch(
      dataKeys: BytesLike[],
      dataValues: BytesLike[],
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    universalReceiver(
      typeId: BytesLike,
      receivedData: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  RENOUNCE_OWNERSHIP_CONFIRMATION_DELAY(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  RENOUNCE_OWNERSHIP_CONFIRMATION_PERIOD(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  VERSION(overrides?: CallOverrides): Promise<string>;

  acceptOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  batchCalls(
    data: BytesLike[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  execute(
    operationType: BigNumberish,
    target: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  executeBatch(
    operationsType: BigNumberish[],
    targets: string[],
    values: BigNumberish[],
    datas: BytesLike[],
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  getData(dataKey: BytesLike, overrides?: CallOverrides): Promise<string>;

  getDataBatch(
    dataKeys: BytesLike[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setData(
    dataKey: BytesLike,
    dataValue: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  setDataBatch(
    dataKeys: BytesLike[],
    dataValues: BytesLike[],
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  universalReceiver(
    typeId: BytesLike,
    receivedData: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    RENOUNCE_OWNERSHIP_CONFIRMATION_DELAY(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    RENOUNCE_OWNERSHIP_CONFIRMATION_PERIOD(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<string>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    batchCalls(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    execute(
      operationType: BigNumberish,
      target: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    executeBatch(
      operationsType: BigNumberish[],
      targets: string[],
      values: BigNumberish[],
      datas: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    getData(dataKey: BytesLike, overrides?: CallOverrides): Promise<string>;

    getDataBatch(
      dataKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setData(
      dataKey: BytesLike,
      dataValue: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setDataBatch(
      dataKeys: BytesLike[],
      dataValues: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    universalReceiver(
      typeId: BytesLike,
      receivedData: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "ContractCreated(uint256,address,uint256,bytes32)"(
      operationType?: BigNumberish | null,
      contractAddress?: string | null,
      value?: BigNumberish | null,
      salt?: null
    ): ContractCreatedEventFilter;
    ContractCreated(
      operationType?: BigNumberish | null,
      contractAddress?: string | null,
      value?: BigNumberish | null,
      salt?: null
    ): ContractCreatedEventFilter;

    "DataChanged(bytes32,bytes)"(
      dataKey?: BytesLike | null,
      dataValue?: null
    ): DataChangedEventFilter;
    DataChanged(
      dataKey?: BytesLike | null,
      dataValue?: null
    ): DataChangedEventFilter;

    "Executed(uint256,address,uint256,bytes4)"(
      operationType?: BigNumberish | null,
      target?: string | null,
      value?: BigNumberish | null,
      selector?: null
    ): ExecutedEventFilter;
    Executed(
      operationType?: BigNumberish | null,
      target?: string | null,
      value?: BigNumberish | null,
      selector?: null
    ): ExecutedEventFilter;

    "OwnershipRenounced()"(): OwnershipRenouncedEventFilter;
    OwnershipRenounced(): OwnershipRenouncedEventFilter;

    "OwnershipTransferStarted(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferStartedEventFilter;
    OwnershipTransferStarted(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferStartedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RenounceOwnershipStarted()"(): RenounceOwnershipStartedEventFilter;
    RenounceOwnershipStarted(): RenounceOwnershipStartedEventFilter;

    "UniversalReceiver(address,uint256,bytes32,bytes,bytes)"(
      from?: string | null,
      value?: BigNumberish | null,
      typeId?: BytesLike | null,
      receivedData?: null,
      returnedValue?: null
    ): UniversalReceiverEventFilter;
    UniversalReceiver(
      from?: string | null,
      value?: BigNumberish | null,
      typeId?: BytesLike | null,
      receivedData?: null,
      returnedValue?: null
    ): UniversalReceiverEventFilter;
  };

  estimateGas: {
    RENOUNCE_OWNERSHIP_CONFIRMATION_DELAY(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    RENOUNCE_OWNERSHIP_CONFIRMATION_PERIOD(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    batchCalls(
      data: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    execute(
      operationType: BigNumberish,
      target: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    executeBatch(
      operationsType: BigNumberish[],
      targets: string[],
      values: BigNumberish[],
      datas: BytesLike[],
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    getData(dataKey: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getDataBatch(
      dataKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setData(
      dataKey: BytesLike,
      dataValue: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    setDataBatch(
      dataKeys: BytesLike[],
      dataValues: BytesLike[],
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    universalReceiver(
      typeId: BytesLike,
      receivedData: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    RENOUNCE_OWNERSHIP_CONFIRMATION_DELAY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    RENOUNCE_OWNERSHIP_CONFIRMATION_PERIOD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    batchCalls(
      data: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    execute(
      operationType: BigNumberish,
      target: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    executeBatch(
      operationsType: BigNumberish[],
      targets: string[],
      values: BigNumberish[],
      datas: BytesLike[],
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getData(
      dataKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDataBatch(
      dataKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setData(
      dataKey: BytesLike,
      dataValue: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setDataBatch(
      dataKeys: BytesLike[],
      dataValues: BytesLike[],
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    universalReceiver(
      typeId: BytesLike,
      receivedData: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
