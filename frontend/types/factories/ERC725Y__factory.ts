/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from 'ethers';
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from 'ethers';
import type { PayableOverrides } from '../common';
import type { ERC725Y, ERC725YInterface } from '../ERC725Y';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: 'initialOwner',
        type: 'address',
      },
    ],
    stateMutability: 'payable',
    type: 'constructor',
  },
  {
    inputs: [],
    name: 'ERC725Y_DataKeysValuesEmptyArray',
    type: 'error',
  },
  {
    inputs: [],
    name: 'ERC725Y_DataKeysValuesLengthMismatch',
    type: 'error',
  },
  {
    inputs: [],
    name: 'ERC725Y_MsgValueDisallowed',
    type: 'error',
  },
  {
    inputs: [],
    name: 'OwnableCannotSetZeroAddressAsOwner',
    type: 'error',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'bytes32',
        name: 'dataKey',
        type: 'bytes32',
      },
      {
        indexed: false,
        internalType: 'bytes',
        name: 'dataValue',
        type: 'bytes',
      },
    ],
    name: 'DataChanged',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousOwner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'OwnershipTransferred',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'dataKey',
        type: 'bytes32',
      },
    ],
    name: 'getData',
    outputs: [
      {
        internalType: 'bytes',
        name: 'dataValue',
        type: 'bytes',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32[]',
        name: 'dataKeys',
        type: 'bytes32[]',
      },
    ],
    name: 'getDataBatch',
    outputs: [
      {
        internalType: 'bytes[]',
        name: 'dataValues',
        type: 'bytes[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'dataKey',
        type: 'bytes32',
      },
      {
        internalType: 'bytes',
        name: 'dataValue',
        type: 'bytes',
      },
    ],
    name: 'setData',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32[]',
        name: 'dataKeys',
        type: 'bytes32[]',
      },
      {
        internalType: 'bytes[]',
        name: 'dataValues',
        type: 'bytes[]',
      },
    ],
    name: 'setDataBatch',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes4',
        name: 'interfaceId',
        type: 'bytes4',
      },
    ],
    name: 'supportsInterface',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'transferOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x60806040526040516200164738038062001647833981810160405281019062000029919062000203565b620000496200003d620000cd60201b60201c565b620000d560201b60201c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000b0576040517f1ad8836c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b620000c681620000d560201b6200045e1760201c565b5062000235565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001cb826200019e565b9050919050565b620001dd81620001be565b8114620001e957600080fd5b50565b600081519050620001fd81620001d2565b92915050565b6000602082840312156200021c576200021b62000199565b5b60006200022c84828501620001ec565b91505092915050565b61140280620002456000396000f3fe60806040526004361061007b5760003560e01c80638da5cb5b1161004e5780638da5cb5b1461012d5780639790242114610158578063dedff9c614610174578063f2fde38b146101b15761007b565b806301ffc9a71461008057806354f6127f146100bd578063715018a6146100fa5780637f23690c14610111575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610850565b6101da565b6040516100b49190610898565b60405180910390f35b3480156100c957600080fd5b506100e460048036038101906100df91906108e9565b61023b565b6040516100f191906109a6565b60405180910390f35b34801561010657600080fd5b5061010f61024d565b005b61012b60048036038101906101269190610afd565b610261565b005b34801561013957600080fd5b506101426102b1565b60405161014f9190610b9a565b60405180910390f35b610172600480360381019061016d9190610d5e565b6102da565b005b34801561018057600080fd5b5061019b60048036038101906101969190610dd6565b61032a565b6040516101a89190610f2b565b60405180910390f35b3480156101bd57600080fd5b506101d860048036038101906101d39190610f79565b6103db565b005b600063629aa69460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610234575061023382610522565b5b9050919050565b60606102468261058c565b9050919050565b610255610631565b61025f600061045e565b565b610269610631565b600034146102a3576040517ff36ba73700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6102ad82826106af565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6102e2610631565b6000341461031c576040517ff36ba73700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610326828261070c565b5050565b6060815167ffffffffffffffff811115610347576103466109d2565b5b60405190808252806020026020018201604052801561037a57816020015b60608152602001906001900390816103655790505b50905060005b82518110156103d5576103ac83828151811061039f5761039e610fa6565b5b602002602001015161058c565b8282815181106103bf576103be610fa6565b5b6020026020010181905250806001019050610380565b50919050565b6103e3610631565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610452576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044990611058565b60405180910390fd5b61045b8161045e565b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60606001600083815260200190815260200160002080546105ac906110a7565b80601f01602080910402602001604051908101604052809291908181526020018280546105d8906110a7565b80156106255780601f106105fa57610100808354040283529160200191610625565b820191906000526020600020905b81548152906001019060200180831161060857829003601f168201915b50505050509050919050565b6106396107dc565b73ffffffffffffffffffffffffffffffffffffffff166106576102b1565b73ffffffffffffffffffffffffffffffffffffffff16146106ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a490611124565b60405180910390fd5b565b806001600084815260200190815260200160002090816106cf91906112fa565b50817fece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b28260405161070091906109a6565b60405180910390a25050565b8051825114610747576040517f3bcc897900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000825103610782576040517f97da5f9500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b82518110156107d7576107cc8382815181106107a4576107a3610fa6565b5b60200260200101518383815181106107bf576107be610fa6565b5b60200260200101516106af565b806001019050610785565b505050565b600033905090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61082d816107f8565b811461083857600080fd5b50565b60008135905061084a81610824565b92915050565b600060208284031215610866576108656107ee565b5b60006108748482850161083b565b91505092915050565b60008115159050919050565b6108928161087d565b82525050565b60006020820190506108ad6000830184610889565b92915050565b6000819050919050565b6108c6816108b3565b81146108d157600080fd5b50565b6000813590506108e3816108bd565b92915050565b6000602082840312156108ff576108fe6107ee565b5b600061090d848285016108d4565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610950578082015181840152602081019050610935565b60008484015250505050565b6000601f19601f8301169050919050565b600061097882610916565b6109828185610921565b9350610992818560208601610932565b61099b8161095c565b840191505092915050565b600060208201905081810360008301526109c0818461096d565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610a0a8261095c565b810181811067ffffffffffffffff82111715610a2957610a286109d2565b5b80604052505050565b6000610a3c6107e4565b9050610a488282610a01565b919050565b600067ffffffffffffffff821115610a6857610a676109d2565b5b610a718261095c565b9050602081019050919050565b82818337600083830152505050565b6000610aa0610a9b84610a4d565b610a32565b905082815260208101848484011115610abc57610abb6109cd565b5b610ac7848285610a7e565b509392505050565b600082601f830112610ae457610ae36109c8565b5b8135610af4848260208601610a8d565b91505092915050565b60008060408385031215610b1457610b136107ee565b5b6000610b22858286016108d4565b925050602083013567ffffffffffffffff811115610b4357610b426107f3565b5b610b4f85828601610acf565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b8482610b59565b9050919050565b610b9481610b79565b82525050565b6000602082019050610baf6000830184610b8b565b92915050565b600067ffffffffffffffff821115610bd057610bcf6109d2565b5b602082029050602081019050919050565b600080fd5b6000610bf9610bf484610bb5565b610a32565b90508083825260208201905060208402830185811115610c1c57610c1b610be1565b5b835b81811015610c455780610c3188826108d4565b845260208401935050602081019050610c1e565b5050509392505050565b600082601f830112610c6457610c636109c8565b5b8135610c74848260208601610be6565b91505092915050565b600067ffffffffffffffff821115610c9857610c976109d2565b5b602082029050602081019050919050565b6000610cbc610cb784610c7d565b610a32565b90508083825260208201905060208402830185811115610cdf57610cde610be1565b5b835b81811015610d2657803567ffffffffffffffff811115610d0457610d036109c8565b5b808601610d118982610acf565b85526020850194505050602081019050610ce1565b5050509392505050565b600082601f830112610d4557610d446109c8565b5b8135610d55848260208601610ca9565b91505092915050565b60008060408385031215610d7557610d746107ee565b5b600083013567ffffffffffffffff811115610d9357610d926107f3565b5b610d9f85828601610c4f565b925050602083013567ffffffffffffffff811115610dc057610dbf6107f3565b5b610dcc85828601610d30565b9150509250929050565b600060208284031215610dec57610deb6107ee565b5b600082013567ffffffffffffffff811115610e0a57610e096107f3565b5b610e1684828501610c4f565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b6000610e6782610916565b610e718185610e4b565b9350610e81818560208601610932565b610e8a8161095c565b840191505092915050565b6000610ea18383610e5c565b905092915050565b6000602082019050919050565b6000610ec182610e1f565b610ecb8185610e2a565b935083602082028501610edd85610e3b565b8060005b85811015610f195784840389528151610efa8582610e95565b9450610f0583610ea9565b925060208a01995050600181019050610ee1565b50829750879550505050505092915050565b60006020820190508181036000830152610f458184610eb6565b905092915050565b610f5681610b79565b8114610f6157600080fd5b50565b600081359050610f7381610f4d565b92915050565b600060208284031215610f8f57610f8e6107ee565b5b6000610f9d84828501610f64565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611042602683610fd5565b915061104d82610fe6565b604082019050919050565b6000602082019050818103600083015261107181611035565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806110bf57607f821691505b6020821081036110d2576110d1611078565b5b50919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061110e602083610fd5565b9150611119826110d8565b602082019050919050565b6000602082019050818103600083015261113d81611101565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026111a67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611169565b6111b08683611169565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006111f76111f26111ed846111c8565b6111d2565b6111c8565b9050919050565b6000819050919050565b611211836111dc565b61122561121d826111fe565b848454611176565b825550505050565b600090565b61123a61122d565b611245818484611208565b505050565b5b818110156112695761125e600082611232565b60018101905061124b565b5050565b601f8211156112ae5761127f81611144565b61128884611159565b81016020851015611297578190505b6112ab6112a385611159565b83018261124a565b50505b505050565b600082821c905092915050565b60006112d1600019846008026112b3565b1980831691505092915050565b60006112ea83836112c0565b9150826002028217905092915050565b61130382610916565b67ffffffffffffffff81111561131c5761131b6109d2565b5b61132682546110a7565b61133182828561126d565b600060209050601f8311600181146113645760008415611352578287015190505b61135c85826112de565b8655506113c4565b601f19841661137286611144565b60005b8281101561139a57848901518255600182019150602085019450602081019050611375565b868310156113b757848901516113b3601f8916826112c0565b8355505b6001600288020188555050505b50505050505056fea2646970667358221220d98f4f607e1950680a325209b7029d39410ef33520c41c3122de1720c1ca1d2b64736f6c63430008110033';

type ERC725YConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC725YConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC725Y__factory extends ContractFactory {
  constructor(...args: ERC725YConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    initialOwner: AddressLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(initialOwner, overrides || {});
  }
  override deploy(
    initialOwner: AddressLike,
    overrides?: PayableOverrides & { from?: string }
  ) {
    return super.deploy(initialOwner, overrides || {}) as Promise<
      ERC725Y & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ERC725Y__factory {
    return super.connect(runner) as ERC725Y__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC725YInterface {
    return new Interface(_abi) as ERC725YInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): ERC725Y {
    return new Contract(address, _abi, runner) as unknown as ERC725Y;
  }
}
